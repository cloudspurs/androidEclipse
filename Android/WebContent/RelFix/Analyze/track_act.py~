#!/usr/bin/python
#coding=utf-8

##
# Author: Jierui Liu (liujierui@gmail.com)
# Date: Sep 29th, 2015
# Description: Track methods for finding the activity where the resource should be released.
#

import os
import sys

from constant import *

##
# function: Judge whether we need more track.
# @param track_list: The functions we are tracking
# @param smali_folder: The smali folder path
# @return: True if we need more track, False if not
#
def need_more_track(track_list, smali_folder):
    result = False

    for each_func in track_list:
        if 0 == each_func[1]:
            smali_file_pos = each_func[0].split(';->')[0].lstrip('L') + '.smali'
            func_name = each_func[0].split(';->')[1].split('(')[0]

            if not func_name in Constants._entry_callback_list:
                result = True
                continue

            target_file = open(smali_folder + os.path.sep + smali_file_pos, 'r')
            try:
                smali_contents = target_file.readlines()
            finally:
                target_file.close()

            for each_content in smali_contents:
                if each_content.find('.super') >= 0:
                    super_class = each_content.strip(' \n').split(' ')[1]
                    if super_class.split(os.path.sep)[-1].rstrip(';') in Constants._act_list \
                            or super_class.split(os.path.sep)[-1].rstrip(';') in Constants._ser_list:
                        each_func[1] = 1
                    else:
                        result = True
                    
                    break

    return result

##
# function: Find the activity or the service a resource should be released.
# @param res: All leaked resources
# @param rfcg: The rFCG
# @param rafcg: The raFCG
# @param smali_folder: The smali folder path
#
def track_activity(res, rfcg, rafcg, smali_folder):
    for each_res in res:
        track_list = []
        track_list.append(['L' + each_res.get_func_path().rstrip('.smali') + ';->' + each_res.get_func_name(), 0])
        while need_more_track(track_list, smali_folder):
            for i in range(len(track_list)):
                if 0 == track_list[i][1]:
                    if 0 == len(rfcg[track_list[i][0]]):
                        class_name = track_list[i][0].split('->')[0]
                        if class_name in rafcg:
                            for item in rafcg[class_name]:
                                track_list.append([item, 1])
                            del(track_list[i])
                            i -= 1
                        else:
                            track_list[i][1] = 3
                    else:
                        for new_func in rfcg[track_list[i][0]]:
                            track_list.append([new_func, 2])
                        del(track_list[i])
                        i -= 1

                if 1 == track_list[i][1] and track_list[i][0].find('->') >= 0:
                    track_list[i][0] = track_list[i][0].split('->')[0]

            for each_func in track_list:
                if 2 == each_func[1]:
                    each_func[1] = 0

        each_res.set_trace_func(track_list)









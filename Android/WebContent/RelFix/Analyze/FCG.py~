#!/usr/bin/python
#coding=utf-8

##
# Author: Jierui Liu (liujierui@gmail.com)
# Date: Aug 24th, 2015
# Description: Construct FCG from FCG_info file.
#

import os
import sys

##
# function: Get the FCG which using a dictionary to store the construction.
# @param FCG_info: The FCG_info file's path
# @return: The dictionary which storing the FCG information
#
def get_FCG(FCG_info):
    FCG_file = open(FCG_info, "r")
    try:
        FCG_file_contents = FCG_file.readlines()
    finally:
        FCG_file.close()

    FCG_construction = {}

    for each_line_content in FCG_file_contents:
        caller_method = each_line_content.split(":")[0].split(";")[0] + "->" + each_line_content.split(":")[0].split(";")[1]
        if not caller_method in FCG_construction:
            FCG_construction[caller_method] = []

        if not each_line_content.split(":")[1].isspace():
            callee_methods_info = each_line_content.split(":")[1].split(",")
            for each_callee_info in callee_methods_info:
                callee_method = each_callee_info.split(";")[0] + "->" + each_callee_info.split(";")[1]
                if not callee_method in FCG_construction[caller_method]:
                    FCG_construction[caller_method].append(callee_method.strip("\n"))

    return FCG_construction
## function end

##
# function: Get the rFCG which using a dictionary to store the construction.
# @param FCG_info: The FCG_info file's path
# @return: The dictionary which storing the rFCG information
#
def get_rFCG(FCG_info):
    FCG_file = open(FCG_info, "r")
    try:
        FCG_file_contents = FCG_file.readlines()
    finally:
        FCG_file.close()

    rFCG_construction = {}

    for each_line_content in FCG_file_contents:
        caller_method = each_line_content.split(":")[0].split(";")[0] + "->" + each_line_content.split(":")[0].split(";")[1]
        if not caller_method in rFCG_construction:
            rFCG_construction[caller_method] = []
 
        callee_methods = []
        
        if not each_line_content.split(":")[1].isspace():
            callee_methods_info = each_line_content.split(":")[1].split(",")
            for each_callee_info in callee_methods_info:
                callee_method = each_callee_info.split(";")[0] + "->" + each_callee_info.split(";")[1]
                callee_methods.append(callee_method.strip("\n"))

        for each_callee_method in callee_methods:
            if not each_callee_method in rFCG_construction:
                rFCG_construction[each_callee_method] = []

            if not caller_method in rFCG_construction[each_callee_method]:
                rFCG_construction[each_callee_method].append(caller_method)

    return rFCG_construction
## function end








#!/usr/bin/python
#coding=utf-8

##
# Author: Jierui Liu (liujierui@gmail.com)
# Date: Oct 13st, 2015
# Description: Add a global assistant list to help us release resources.
#

import os

from constant import *
from track_reg import *

##
# function: Insert new sentences in main activity class file.
# @param contents: The original file contents
# @param index: The position of the new sentences
# @param main_act: The main activity
# @param flag: The flag of if we find a <clinit> method
#
def insert_sentences(contents, index, main_act, flag):
    new_contents = []

    if 0 == flag:
        new_contents.append('\n')
        new_contents.append('.method static constructor <clinit>()V\n')
        new_contents.append('    .locals 1\n')

    new_contents.append('\n')
    new_contents.append('    new-instance v0, Ljava/util/ArrayList;\n')
    new_contents.append('\n')
    new_contents.append('    invoke-direct {v0}, Ljava/util/ArrayList;-><init>()V\n')
    new_contents.append('\n')
    new_contents.append('    sput-object v0, L' + main_act.replace('\\', '/') + ';->' + Constants._ass_list_name + ':Ljava/util/List;\n')
    new_contents.append('\n')

    if 0 == flag:
        new_contents.append('    return-void\n')
        new_contents.append('.end method\n')
        
    if 0 == flag:
        contents += new_contents
    else:
        contents[index+1:index+1] = new_contents

##
# function: Add a global assistant list.
# @param smali_folder: The smali folder path
# @param main_act: The main activity
#
def add_ass_list(smali_folder, main_act):
    main_act_file = open(smali_folder + os.path.sep + main_act + '.smali', 'r')
    try:
        file_contents = main_act_file.readlines()
    finally:
        main_act_file.close()

    new_contents = []
    new_contents.append('\n')
    new_contents.append('.field public static ' + Constants._ass_list_name + ':Ljava/util/List;\n')
    
    file_contents += new_contents

    # Init the list.
    clinit_index = file_contents.index('.method static constructor <clinit>()V\n')
    if clinit_index >= 0:
        regs_index = clinit_index
        while file_contents[regs_index].find('.locals') < 0:
            regs_index += 1
        
        regs_num = file_contents[regs_index].strip(' \n').split(' ')[1]
        if '0' == regs_num:
            file_contents[regs_index] == '    .locals 1\n'

        return_index = clinit_index
        while file_contents[return_index].find('return-void') < 0:
            return_index += 1

        insert_index = next_valid_index(file_contents, return_index, 1)
        insert_sentences(file_contents, insert_index, main_act, 1)
    else:
        insert_index = len(file_contents - 1)
        insert_sentences(file_contents, insert_index, main_act, 0)

    main_act_file = open(smali_folder + os.path.sep + main_act + '.smali', 'w')
    try:
        main_act_file.writelines(file_contents)
    finally:
        main_act_file.close()

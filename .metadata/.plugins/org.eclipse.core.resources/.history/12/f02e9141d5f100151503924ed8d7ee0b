package client;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.WatchEvent;
import java.nio.file.WatchEvent.Kind;
import java.nio.file.WatchKey;  
import java.nio.file.WatchService;
import java.nio.file.StandardWatchEventKinds;
import java.util.Date;
import java.text.SimpleDateFormat;

public class client {

private final static String relda = "/home/mqg/android/relda";
private final static String reldaResult = "home/mqg/android/reldaResult";
	
public static void main(String[] args) {
	
	Path path = Paths.get(relda);
	Path path1 = Paths.get(reldaResult);
	try {
		watchPath(path);
	} catch(IOException | InterruptedException e) {  
        System.err.println(e);  
    }
	try {
		watchPath(path1);
	} catch(IOException | InterruptedException e) {  
        System.err.println(e);  
    }
}  


public static void watchPath(Path path)throws IOException, InterruptedException {
	
    WatchService watcher = FileSystems.getDefault().newWatchService();
    
    // 设置path路径文件观察服务（新建，修改，删除）
    path.register(watcher, StandardWatchEventKinds.ENTRY_CREATE,
    		StandardWatchEventKinds.ENTRY_MODIFY,
    		StandardWatchEventKinds.ENTRY_DELETE);
    
    while (true) {
    	WatchKey key = watcher.take();
    	
    	for (WatchEvent<?> event : key.pollEvents()) {
    		Kind<?> kind = event.kind();
    		
    		if (kind == StandardWatchEventKinds.OVERFLOW){
    			continue;
    		}
    		
    		if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
    			// 该批注的作用是给编译器一条指令，告诉它对被批注的代码元素内部的某些警告保持静默
    			// unchecked: 执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型
    			@SuppressWarnings({"unchecked"})
    			// get the filename of the event
				WatchEvent<Path> watchEventPath = (WatchEvent<Path>)event;
        		Path fileName = watchEventPath.context();
        		
        		cmd(fileName.toString(), path.toString());
    		}
    		
    		@SuppressWarnings("unchecked")
			WatchEvent<Path> watchEventPath = (WatchEvent<Path>)event;
    		Path fileName = watchEventPath.context();
    		
    		// 设置日期格式
    		SimpleDateFormat now = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    		
    		System.out.printf("event: %s    filename: %s    time: %s%n"  
                    ,kind.name(), fileName, now.format(new Date())); 
    		
    		if (!key.reset()) {
    			break;
    		}
    	}
    }
}
 
}
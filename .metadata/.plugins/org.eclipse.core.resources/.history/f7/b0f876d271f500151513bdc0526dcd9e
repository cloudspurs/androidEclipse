package server;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.WatchEvent;
import java.nio.file.WatchEvent.Kind;
import java.nio.file.WatchKey;  
import java.nio.file.WatchService;
import java.nio.file.StandardWatchEventKinds; 

public class server {

	private final static String relda = "/home/mengqg/android/relda";
	private final static String Relda = "/home/mengqg/android/servers/Relda2";
	
	public static void main(String[] args) {	     
		 
		Path path = Paths.get(relda);
		
		try {
			watchPath(path);
		} catch(IOException | InterruptedException ex) {  
	        System.err.println(ex);  
	    }
	 
	}  
	
	public static void watchPath(Path path)throws IOException, InterruptedException {  
	    WatchService watcher = FileSystems.getDefault().newWatchService();
	    // 设置path路径文件观察服务（新建，修改，删除）
	    path.register(watcher, StandardWatchEventKinds.ENTRY_CREATE,
	    		StandardWatchEventKinds.ENTRY_MODIFY,
	    		StandardWatchEventKinds.ENTRY_DELETE);
	    
	    while (true) {
	    	WatchKey key = watcher.take();
	    	
	    	for (WatchEvent<?> event : key.pollEvents()) {
	    		Kind<?> kind = event.kind();
	    		
	    		if (kind == StandardWatchEventKinds.OVERFLOW){
	    			continue;
	    		}
	    		
	    		if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
	    			@SuppressWarnings("unchecked")
					WatchEvent<Path> watchEventPath = (WatchEvent<Path>)event;
	        		Path filename = watchEventPath.context();
	        		
	        		cmd(filename.toString(), Relda);
	        		
	        		//String result = filename.toString().substring(0, filename.toString().length() - 5);
	        		//result = result + ".class";
	        		
	        		scp("bug_report", relda);
	        		
	        		
	    		}
	    		
	    		// get the filename for the event
	    		@SuppressWarnings("unchecked")
				WatchEvent<Path> watchEventPath = (WatchEvent<Path>)event;
	    		Path fileName = watchEventPath.context();
	    		
	    		
	    		System.out.printf("Event %s has happened,which fileName is %s%n"  
	                    ,kind.name(),fileName); 
	    		
	    		if (!key.reset()) {
	    			break;
	    		}
	    	}
	    }
	}
	
	public static void cmd(String file, String directory) {
		String command = "./Relda2.py -r /home/mengqg/android/reldaResult -s /home/mengqg/android/relda/" + file;
		String cmd[] = {"/bin/sh", "-c", command};
		File dir = new File(directory);
		
		try {
			Runtime runtime = Runtime.getRuntime();
			Process process = runtime.exec(cmd, null, dir);
			// 取得命令结果的输出流  
		    InputStream is = process.getInputStream();  
		    // 用一个读输出流类去读  
		    InputStreamReader isr = new InputStreamReader(is);  
		    // 用缓冲器读行  
		    BufferedReader br = new BufferedReader(isr);  
		    String line = null;  
		    while ((line = br.readLine()) != null) {  
		        System.out.println(line);  
		    }  
		    is.close();  
		    isr.close();  
		    br.close();  
		} catch (IOException e) {  
		    e.printStackTrace();  
		}
	}
	
	public static void scp(String file, String directory) {
		String command = "scp " + file + " mqg@121.42.139.144:/home/mqg/android/reldaResult";
		
		String cmd[] = {"/bin/sh", "-c", command};
		File dir = new File(directory);
		
		try {
			Runtime runtime = Runtime.getRuntime();
			Process process = runtime.exec(cmd, null, dir);
			// 取得命令结果的输出流  
		    InputStream is = process.getInputStream();  
		    // 用一个读输出流类去读  
		    InputStreamReader isr = new InputStreamReader(is);  
		    // 用缓冲器读行  
		    BufferedReader br = new BufferedReader(isr);  
		    String line = null;  
		    while ((line = br.readLine()) != null) {  
		        System.out.println(line);  
		    }  
		    is.close();  
		    isr.close();  
		    br.close();  
		} catch (IOException e) {  
		    e.printStackTrace();  
		}
	}
	
	public static void scanFile(File file) {
		String fileList[] = file.list();
		
		if (fileList.length != 0) {
			for (int i =0; i < fileList.length; i++) {
				String name = file.getAbsolutePath() + "/" +fileList[i];
				File temp = new File(name);
				// 如果是文件夹
				if (temp.isDirectory()) {
					// 如果文件夹为空
					if (temp.list().length == 0) {
						System.out.println(name + "/");
						continue;
					}
					else {
						scanFile(temp);
					}
				}
				
				System.out.println(name);
			}
		}
		else {
			String name = file.getAbsolutePath() + "/";
			System.out.println(name);
		}
	}
	 
}